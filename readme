
# Task Management Service

## Problem Breakdown and Design Decisions

### Problem Breakdown
The Task Management Service is designed to manage tasks with the following functionalities:
- Create a new task
- Retrieve a task by ID
- Retrieve all tasks
- Update a task
- Delete a task
- Retrieve tasks by their completion status

### Design Decisions
- **Language**: Go was chosen for its performance and concurrency capabilities.
- **Framework**: Gin was used for its simplicity and performance in handling HTTP requests.
- **Repository Pattern**: Implemented to abstract the data layer, making it easier to switch to a different storage solution in the future.
- **In-Memory Storage**: Used for simplicity and ease of testing. This can be replaced with a persistent storage solution like a database.
- **UUIDs**: Used for task IDs to ensure uniqueness.
- **Microservices Concepts**: The service is designed to be stateless and can be easily scaled horizontally. The repository pattern allows for easy integration with other services or databases.

## Instructions to Run the Service

### Prerequisites
- Go 1.16 or later
- Git

### Steps
1. Clone the repository:
    ```sh
    git clone https://github.com/kushagragupta/tms.git
    cd tms
    ```

2. Install dependencies:
    ```sh
    go mod tidy
    ```

3. Run the service:
    ```sh
    go run main.go
    ```

4. The service will be available at `http://localhost:8080`.

## API Documentation

### Endpoints

#### Create Task
- **URL**: `/tasks`
- **Method**: `POST`
- **Request Body**:
    ```json
    {
        "title": "New Task",
        "completed": false
    }
    ```
- **Response**:
    ```json
    {
        "message": "Task created"
    }
    ```

#### Get Task
- **URL**: `/tasks/:id`
- **Method**: `GET`
- **Response**:
    ```json
    {
        "id": "task-id",
        "title": "Task Title",
        "completed": false,
        "created_at": "2023-10-01T00:00:00Z",
        "updated_at": "2023-10-01T00:00:00Z"
    }
    ```

#### Get Tasks
- **URL**: `/tasks`
- **Method**: `GET`
- **Response**:
    ```json
    [
        {
            "id": "task-id",
            "title": "Task Title",
            "completed": false,
            "created_at": "2023-10-01T00:00:00Z",
            "updated_at": "2023-10-01T00:00:00Z"
        }
    ]
    ```

#### Update Task
- **URL**: `/tasks/:id`
- **Method**: `PUT`
- **Request Body**:
    ```json
    {
        "title": "Updated Task Title",
        "completed": true
    }
    ```
- **Response**:
    ```json
    {
        "message": "Task updated"
    }
    ```

#### Delete Task
- **URL**: `/tasks/:id`
- **Method**: `DELETE`
- **Response**:
    ```json
    {
        "message": "Task deleted"
    }
    ```

#### Get Tasks by Status
- **URL**: `/tasks?status=Completed`
- **Method**: `GET`
- **Response**:
    ```json
    [
        {
            "id": "task-id",
            "title": "Task Title",
            "completed": true,
            "created_at": "2023-10-01T00:00:00Z",
            "updated_at": "2023-10-01T00:00:00Z"
        }
    ]
    ```

## Microservices Concepts Demonstrated
- **Stateless Service**: The service does not maintain any state between requests, making it easy to scale horizontally.
- **Repository Pattern**: Abstracts the data layer, allowing for easy integration with different storage solutions.
- **Modular Design**: The service is divided into controllers, services, and repositories, making it easy to maintain and extend.
- **Scalability**: The service can be deployed in a containerized environment and scaled as needed.